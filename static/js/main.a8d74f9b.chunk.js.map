{"version":3,"sources":["features/reservationSlice.ts","features/customerSlice.ts","components/ReservationCard.tsx","components/customerCard.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["reservationSlice","createSlice","name","initialState","value","reducers","addReservation","state","action","push","payload","removeReservation","splice","actions","customerSlice","addCustomer","addFoodToCustomer","forEach","customer","id","food","ReservationCard","index","dispatch","useDispatch","onClick","uuid","className","CustomerCard","useState","customerFoodInput","setCustomerFoodInput","map","item","onChange","e","target","App","reservationNameInput","setReservationNameInput","reservations","useSelector","customers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","reservationReducer","customerReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8d74f9b.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\n\r\n//typescript wants to know the type of object initialState is, so we make an interface with typing for this\r\ninterface ReservationState {\r\n    value: string[]\r\n}\r\n\r\nconst initialState: ReservationState = {\r\n    value: [\"Selena\"]\r\n}\r\n\r\nexport const reservationSlice = createSlice({\r\n    name: \"reservations\",\r\n    initialState,\r\n    reducers: {\r\n        //typescript wants to know the type of action, toolkit has the type PayloadAction, and we use string\r\n        addReservation: (state, action: PayloadAction<string>) => {\r\n            state.value.push(action.payload)    \r\n        },\r\n        removeReservation: (state, action: PayloadAction<number>) => {\r\n            state.value.splice(action.payload, 1)    \r\n        }\r\n    }\r\n})\r\n\r\nexport const { addReservation, removeReservation } = reservationSlice.actions;\r\n\r\nexport default reservationSlice.reducer;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\n\r\n//typescript wants to know the type of object initialState is, so we make an interface with typing for this\r\ninterface CustomerState {\r\n    value: Customer[]\r\n}\r\n\r\ninterface Customer {\r\n    id: string,\r\n    name: string,\r\n    food: string[]\r\n}\r\n\r\ninterface AddFoodToCustomerPayload {\r\n    food: string,\r\n    id: string\r\n}\r\n\r\nconst initialState: CustomerState = {\r\n    value: []\r\n}\r\n\r\nexport const customerSlice = createSlice({\r\n    name: \"customers\",\r\n    initialState,\r\n    reducers: {\r\n       addCustomer: (state, action: PayloadAction<Customer>) => {\r\n           state.value.push(action.payload)\r\n       },\r\n       addFoodToCustomer: (state, action: PayloadAction<AddFoodToCustomerPayload>) => {\r\n            state.value.forEach((customer => {\r\n                if (customer.id === action.payload.id) {\r\n                    customer.food.push(action.payload.food);\r\n                }\r\n            }))\r\n       }\r\n    }\r\n})\r\n\r\nexport const { addCustomer, addFoodToCustomer } = customerSlice.actions;\r\n\r\nexport default customerSlice.reducer;","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeReservation } from \"../features/reservationSlice\";\r\nimport { addCustomer } from \"../features/customerSlice\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\ninterface ReservationCardTypes {\r\n    name: string,\r\n    index: number\r\n}\r\n\r\nexport default function ReservationCard({name, index}: ReservationCardTypes) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return <div onClick={() => {\r\n        dispatch(removeReservation(index))\r\n        dispatch(addCustomer({\r\n            id: uuid(),\r\n            name,\r\n            food: []\r\n        }))    \r\n    }} className=\"reservation-card-container\">{name}</div>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addFoodToCustomer } from \"../features/customerSlice\";\r\n\r\ninterface CutomerCardTypes {\r\n  id: string;\r\n  name: string;\r\n  food: string[];\r\n}\r\n\r\nexport default function CustomerCard({ id, name, food }: CutomerCardTypes) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [customerFoodInput, setCustomerFoodInput] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"customer-food-card-container\">\r\n      <p>{name}</p>\r\n      <div className=\"customer-foods-container\">\r\n        <div className=\"customer-food\">\r\n          {food.map((item) => {\r\n            return <p>{item}</p>;\r\n          })}\r\n        </div>\r\n        <div className=\"customer-food-input-container\">\r\n          <input\r\n            value={customerFoodInput}\r\n            onChange={(e) => setCustomerFoodInput(e.target.value)}\r\n          />\r\n          <button\r\n            onClick={() => {\r\n              if (!customerFoodInput) return;\r\n              dispatch(\r\n                addFoodToCustomer({\r\n                  id,\r\n                  food: customerFoodInput,\r\n                })\r\n              );\r\n            }}\r\n          >\r\n            Add\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./App.css\";\nimport { RootState } from \"./app/store\";\nimport ReservationCard from \"./components/ReservationCard\";\nimport CustomerCard from \"./components/customerCard\";\nimport { addReservation } from \"./features/reservationSlice\";\n\nfunction App() {\n  const [reservationNameInput, setReservationNameInput] = useState(\"\");\n\n  const reservations = useSelector(\n    (state: RootState) => state.reservations.value\n  );\n\n  const customers = useSelector((state: RootState) => state.customers.value);\n\n  const dispatch = useDispatch();\n\n  const hangleAddReservations = () => {\n    if (!reservationNameInput) return;\n    dispatch(addReservation(reservationNameInput));\n    setReservationNameInput(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"reservation-container\">\n          <div>\n            <h5 className=\"reservation-header\">Reservations</h5>\n            <div className=\"reservation-cards-container\">\n              {reservations.map((name, index) => {\n                return <ReservationCard name={name} index={index} />;\n              })}\n            </div>\n          </div>\n          <div className=\"reservation-input-container\">\n            <input\n              value={reservationNameInput}\n              onChange={(e) => setReservationNameInput(e.target.value)}\n            />\n            <button onClick={hangleAddReservations}>Add</button>\n          </div>\n        </div>\n        <div className=\"customer-food-container\">\n          {customers.map((customer) => {\n            return <CustomerCard id={customer.id} name={customer.name} food={customer.food} />;\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport reservationReducer from \"../features/reservationSlice\"\r\nimport customerReducer from \"../features/customerSlice\"\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        reservations: reservationReducer,\r\n        customers: customerReducer\r\n    }\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}